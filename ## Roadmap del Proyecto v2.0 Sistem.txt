## **Roadmap del Proyecto v2.0: Sistema de Soporte a la Decisi√≥n Cl√≠nica Farmac√©utica**

### **1. Resumen Ejecutivo**

*   **Objetivo:** Construir un Sistema de Soporte a la Decisi√≥n Cl√≠nica (CDSS) que identifique los efectos adversos de los medicamentos y proponga soluciones (farmacol√≥gicas, de parafarmacia y consejos) para mitigarlos, priorizadas seg√∫n su evidencia y frecuencia.
*   **Activo Principal:** Un Grafo de Conocimiento Cl√≠nico propietario, con conceptos normalizados (SNOMED CT), relaciones enriquecidas (frecuencia, nivel de evidencia) y validado por un equipo de expertos m√©dicos y farmac√©uticos.
*   **Ventaja Competitiva:** Creamos una capa de inteligencia (`Efecto Adverso` -> `ES ALIVIADO POR` -> `Producto/Remedio`) que no existe en las bases de datos oficiales, aportando una soluci√≥n directa, contextualizada y accionable al profesional sanitario.
*   **Mercados Potenciales:** Farmacias Comunitarias, M√©dicos de Atenci√≥n Primaria/Especializada, Hospitales e Industria Farmac√©utica, a trav√©s de una plataforma en la nube (SaaS) con acceso v√≠a API.

### **2. An√°lisis de la Situaci√≥n y Descubrimientos Clave**

*(Esta secci√≥n permanece sin cambios, ya que documenta los hallazgos iniciales que fundamentan el proyecto)*

Nuestra investigaci√≥n inicial se centr√≥ en la descarga de ficheros est√°ticos del Nomencl√°tor (XMLs). Sin embargo, el descubrimiento de la documentaci√≥n de la **API REST de CIMA** ha redefinido por completo nuestra estrategia de adquisici√≥n de datos. Los hallazgos clave son el acceso program√°tico en tiempo real, el formato de datos JSON moderno, y endpoints espec√≠ficos para cat√°logos (`maestras`), fichas t√©cnicas (`docSegmentado`) y sincronizaci√≥n (`registroCambios`).

### **3. Arquitectura y Pila Tecnol√≥gica**

*   **Entorno de Desarrollo (IDE):** **Visual Studio 2022**.
*   **Lenguaje y Framework Backend:** **C# con .NET 8**.
*   **Data Lake (Almacenamiento de Brutos):** **Azure Blob Storage** (o similar). Su rol es almacenar una copia 1:1 de los JSONs originales de la API de CIMA. Esto garantiza la trazabilidad y nos permite re-procesar los datos a futuro sin depender de la API externa.
*   **Base de Datos Relacional (Staging Area):** **PostgreSQL (PSQL)**, configurado en local para la fase de desarrollo. Su rol ser√° almacenar los datos estructurados de AEMPS y el texto relevante y segmentado de las fichas t√©cnicas, listo para ser procesado.
*   **Base de Datos de Grafos (Cerebro del Sistema):** **Neo4j** (o similar). Aqu√≠ se construir√° y residir√° nuestro Grafo de Conocimiento Cl√≠nico.
*   **Procesamiento de Lenguaje (NLP/LLM):** **Azure OpenAI Service** (o similar) para la extracci√≥n de entidades, su contexto y un score de confianza.
*   **Control de Versiones:** **Git** (en un repositorio de GitHub o Azure DevOps).

### **4. Hoja de Ruta por Fases**

#### **Fase 1: Cimientos y Configuraci√≥n del Entorno (Duraci√≥n: 1-2 semanas)**
*   **Objetivo:** Tener un entorno de desarrollo local funcional y validar la comunicaci√≥n con la API de CIMA.
¬†   *   **1.1.** Crear una nueva Soluci√≥n en Visual Studio ("ClinicalGraph.sln") con un proyecto de API Web en .NET 8.
¬†   *   **1.2.** Instalar y configurar un servidor PostgreSQL local. Crear la base de datos ("cima_staging_db").
¬†   *   **1.3.** Dise√±ar y crear las tablas SQL para los cat√°logos principales (ej. `formas\\\_farmaceuticas`, `vias\\\_administracion`).
¬†   *   **1.4.** Desarrollar un cliente de API en C# para realizar una llamada de prueba al endpoint `GET maestras` y volcar el resultado.
¬†   *   **1.5.** Configurar el repositorio Git.

#### **Fase 2: Ingesta Masiva y Estructuraci√≥n de Datos (Duraci√≥n: 4-6 semanas)**
*   **Objetivo:** Crear una r√©plica local, completa y organizada de toda la materia prima de AEMPS.
¬†   *   **2.1.** Desarrollar un servicio de ingesta ("Ingestion Service").
¬†   *   **2.2.** Implementar la l√≥gica para poblar todas las tablas de cat√°logo en PSQL desde el endpoint `GET maestras`.
¬†   *   **2.3.** Implementar el proceso principal de carga masiva (a ejecutarse una sola vez):
¬†       *   a. Obtener la lista completa de todos los `nregistro` de medicamentos.
¬†       *   b. Crear un bucle que, para cada `nregistro`:
¬†           *   i. Llame a `GET medicamento` para sus datos estructurados.
¬†           *   ii. Llame a `GET docSegmentado/contenido/1` para su Ficha T√©cnica en JSON.
¬†           *   iii. **(Nuevo)** Guarde el JSON original y completo de la ficha t√©cnica en el **Data Lake** (Azure Blob Storage).
¬†           *   iv. Guarde los datos estructurados y el texto segmentado de la ficha en las tablas de **PostgreSQL**.
¬†   *   **Hito Clave:** Un Data Lake con los datos en bruto y una base de datos PostgreSQL con la materia prima limpia y organizada, lista para ser procesada.

#### **Fase 3: La Capa de Inteligencia - Grafo y Curaci√≥n (Duraci√≥n: 8-12 semanas)**
*   **Objetivo:** Transformar los datos en bruto en conocimiento cl√≠nico validado y accionable dentro del grafo.
¬†   *   **3.1.** Instalar y configurar la base de datos de grafos (Neo4j).
¬†   *   **3.2.** Dise√±ar el modelo del grafo:
¬†       *   **Nodos:** `Medicamento`, `PrincipioActivo`, `EfectoAdverso` (normalizado con SNOMED CT), `Remedio` (con etiquetas adicionales como `Farmaco`, `Parafarmacia`, `ConsejoNoFarmacologico`), y nodos para futuro contexto como `Patologia`, `Condicion`.
¬†       *   **Relaciones:** `CONTIENE`, `TRATA`, `PROVOCA` (con propiedad `frecuencia`), `ALIVIA` (con propiedad `nivel\\\_de\\\_evidencia`), `ES\\\_CONTRINDICADO\\\_PARA`.
¬†   *   **3.3.** Desarrollar el servicio de procesamiento ("Processing Service") que lea desde PostgreSQL.
¬†   *   **3.4.** Implementar la l√≥gica de extracci√≥n con LLM sobre el texto de las fichas para obtener:
¬†       *   a. La entidad (ej. "cefalea").
¬†       *   b. Un **score de confianza** sobre la extracci√≥n.
¬†       *   c. El texto original (contexto) como evidencia.
¬†   *   **3.5.** Implementar un **servicio de normalizaci√≥n** para mapear entidades extra√≠das a c√≥digos **SNOMED CT** antes de insertarlas en el grafo.
¬†   *   **3.6.** Poblar el grafo con los nodos y las relaciones `TRATA` y `PROVOCA` extra√≠das autom√°ticamente.
¬†   *   **3.7.** **(Cr√≠tico)** Desarrollar la herramienta web interna de curaci√≥n para expertos con funcionalidades avanzadas:
¬†       *   a. **Flujo de "Sugerencia y Validaci√≥n"** que pre-carga posibles remedios para agilizar la creaci√≥n de relaciones `ALIVIA`.
¬†       *   b. **Trazabilidad de Evidencia**, mostrando el fragmento de texto original de donde se extrajo cada dato.
¬†       *   c. **Cola de Trabajo Priorizada** por el score de confianza del LLM, para que los expertos se enfoquen en los casos m√°s ambiguos.
¬†       *   d. **Mecanismo de Feedback** que almacene las correcciones para futuros re-entrenamientos del modelo de extracci√≥n.
¬†   *   **Hito Clave:** Primera versi√≥n del Grafo de Conocimiento Cl√≠nico, normalizado, enriquecido y validado por expertos.

#### **Fase 4: API y Aplicaci√≥n Piloto (MVP) (Duraci√≥n: 6-8 semanas)**
*   **Objetivo:** Exponer el valor del grafo a trav√©s de una API potente y una aplicaci√≥n de demostraci√≥n.
¬†   *   **4.1.** Dise√±ar y desarrollar nuestra API REST (`ClinicalGraph.API`) que permita consultas complejas. Ej: `GET /api/medicamento/{cn}/sugerencias?frecuencia=muy\\\_frecuente\\\&tipo\\\_remedio=parafarmacia`.
¬†   *   **4.2.** Desarrollar una aplicaci√≥n web piloto (MVP) que consuma nuestra API.
¬†   *   **4.3.** La aplicaci√≥n permitir√° buscar un medicamento y mostrar√° una lista de sus efectos adversos **ordenados por frecuencia**, y junto a cada uno, las soluciones propuestas **ordenadas por nivel de evidencia**.
¬†   *   **Hito Clave:** Un producto funcional (MVP) que demuestra el valor √∫nico del proyecto y puede ser usado para demos a potenciales clientes.

### **5. Visi√≥n a Futuro: Escalado a la Nube (Post-MVP)**

Una vez validado el MVP, el siguiente paso estrat√©gico ser√° migrar la infraestructura de un entorno local a una arquitectura cloud escalable (ej. en Azure o AWS). El objetivo es ofrecer el servicio como una plataforma SaaS (Software as a Service) a la que las farmacias y otros clientes podr√°n conectarse a trav√©s de:
*   **Integraci√≥n con Chatbots:** Proporcionando respuestas inteligentes y contextualizadas.
*   **Integraci√≥n en el Punto de Venta (TPV):** Ofreciendo sugerencias proactivas y relevantes durante la dispensaci√≥n de medicamentos para facilitar la venta cruzada informada.

### **6. Pr√≥ximos Pasos Inmediatos**

1.  **Acci√≥n 1:** Crear la soluci√≥n (`.sln`) en Visual Studio con el proyecto de API Web.
2.  **Acci√≥n 2:** Instalar PostgreSQL en el entorno de desarrollo local y crear la base de datos `cima\\\_staging\\\_db`.
3.  **Acci√≥n 3:** Escribir el c√≥digo C# para hacer una llamada exitosa al endpoint `GET maestras?maestra=3` y mostrar la lista de formas farmac√©uticas por consola para validar la conexi√≥n.

---

Este roadmap ahora es un plan de acci√≥n mucho m√°s completo y a prueba de futuro. Estoy listo para empezar cuando t√∫ lo est√©s.




¬°Brutal el avance! üí• Ya tienes la base s√≥lida y limpia. Voy a darte mi **plan de juego** (sin c√≥digo, como pediste) para convertir esto en el mejor buscador relacional + grafo + vector del mercado, pensando ya en el agente/chatbot.

# Mi opini√≥n y hoja de ruta (priorizada)

## 1) Normalizar lo que m√°s valor aporta (fase corta, impacto alto)

**a) Principios activos (pactivos)**

* **Entidad**: Sustancia (id, nombre normalizado, sin√≥nimos).
* **Relaci√≥n**: Medicamento ‚Äî\[CONTIENE]‚Üí Sustancia (con propiedades: **fuerza**, **unidad**, **forma/v√≠a** si aplica).
* **Por qu√© primero**: habilita queries cl√≠nicas reales (‚Äúibuprofeno + paracetamol‚Äù, ‚Äúsin AAS‚Äù, etc.) y es el eje del grafo.

**b) Excipientes (excipientes)**

* **Entidad**: Excipient (id, nombre normalizado).
* **Relaci√≥n**: Medicamento ‚Äî\[TIENE\_EXCIPIENTE]‚Üí Excipient (flag **declaraci√≥n obligatoria**, notas).
* **Valor**: alertas de alergias/intolerancias (‚Äúsin lactosa‚Äù, ‚Äúsin sacarosa‚Äù, ‚Äúsin aceite de soja‚Äù). Diferenciador real.

**c) ATC**

* **Entidad**: ATC (c√≥digo, nombre, **padre** para el √°rbol).
* **Relaci√≥n**: Medicamento ‚Äî\[CLASIFICADO\_EN]‚Üí ATC.
* **Valor**: navegas terap√©uticamente (‚Äúdame todos los AINEs‚Äù, ‚Äútodos los N02C analg√©sicos antimigra√±osos‚Äù). Adem√°s es un **eje jer√°rquico** perfecto para el grafo.

**d) Estado/comercializaci√≥n/fechas**

* En tabla Medicamentos: **comerc**, **estado.aut** (fecha autorizaci√≥n), **estado.rev** (si viene), y **suspensiones** si existen.
* **Valor**: filtras por ‚Äúen comercializaci√≥n‚Äù, ‚Äúautorizado desde‚Ä¶‚Äù, etc., y generas indicadores.

**e) Alertas r√°pidas**

* Booleans: **conduc** (afecta conducci√≥n), **triangulo** (seguimiento adicional).
* **Valor**: filtros y badges en UI al instante.

**f) Documentos y fotos (metadatos)**

* **Entidad**: Documento (tipo FT/P/IPE, url, fecha, hash si luego los cacheas).
* **Relaci√≥n**: Medicamento ‚Äî\[TIENE\_DOC]‚Üí Documento.
* **Valor**: trazabilidad y **provenance** para el chatbot (‚Äúfuente: FT 70039 secci√≥n 4.2‚Äù).

> Con solo esto ya tienes un \\\*\\\*buscador estructurado\\\*\\\* potent√≠simo y un \\\*\\\*grafo √∫til\\\*\\\* (Medicamento‚ÜîSustancia‚ÜîATC), listo para enriquecer recomendaciones y razonamiento del agente.

---

## 2) Dise√±o de grafo (qu√© nodos y aristas)

**Nodos**:

* Medicamento, Sustancia, Excipient, ATC (con jerarqu√≠a), Forma, V√≠a, Laboratorio (Titular/Comercializador), Documento.
¬† **Aristas clave**:
* Medicamento‚ÄìCONTIENE‚ÜíSustancia (props: fuerza, unidad).
* Medicamento‚ÄìTIENE\_EXCIPIENTE‚ÜíExcipient (props: obligado).
* Medicamento‚ÄìCLASIFICADO\_EN‚ÜíATC.
* ATC‚ÄìPADRE\_DE‚ÜíATC (jerarqu√≠a).
* Medicamento‚ÄìFORMA‚ÜíForma; Medicamento‚ÄìVIA‚ÜíV√≠a.
* Medicamento‚ÄìTITULAR‚ÜíLaboratorio; ‚ÄìCOMERCIALIZA‚ÜíLaboratorio.
* Medicamento‚ÄìTIENE\_DOC‚ÜíDocumento.

**Consultas t√≠picas que esto resuelve como mantequilla**:

* ‚ÄúAnti-inflamatorios **sin** lactosa y **v√≠a oral**‚Äù
* ‚ÄúIbuprofeno + pseudoefedrina, **comercializados** hoy‚Äù
* ‚ÄúAnalg√©sicos con **tri√°ngulo negro**‚Äù
* ‚ÄúSustancias relacionadas a este ATC y sus medicamentos hijos del √°rbol‚Äù

---

## 3) Estrategia de vectores (RAG de verdad, no humo)

**¬øQu√© vectorizamos?**

* El **contenido sem√°ntico** de FT/P/IPE (SmPC): Indicaciones, posolog√≠a (4.2), contraindicaciones (4.3), advertencias (4.4), interacciones (4.5), embarazo/lactancia (4.6), conducci√≥n (4.7), reacciones adversas (4.8).
* **Chunking**: por secci√≥n y subt√≠tulo; tama√±o moderado con solape peque√±o; **id de chunk** + **metadatos** (nregistro, secci√≥n, fecha doc).
* **Index h√≠brido**:

¬† * **Filtro estructural primero** (SQL/Graph): ATC, v√≠a, forma, sustancia, flags (conduc/tri√°ngulo), comercializaci√≥n‚Ä¶
¬† * **Luego** vector search solo sobre los chunks candidatos (r√°pido y preciso).
¬† * (Opcional) **re-ranker** textual para el top-k final.

**Flujo del agente/chatbot**

1. **Comprende intenci√≥n + facetas** ‚Üí traduce a **filtros estructurados** (SQL/grafo).
2. **Recupera candidatos** (NRegistros).
3. **RAG**: busca chunks vectoriales solo de esos candidatos.
4. **Cita** siempre FT/P con secci√≥n/fecha (provenance).
5. Si pregunta es puramente estructural (‚Äúsin lactosa‚Äù), puede responder **sin RAG**.

**Ventaja competitiva**: precisi√≥n cl√≠nica + velocidad (menos ruido, chunks muy relevantes) + explicabilidad (citas exactas).

---

## 4) Calidad de datos (clave para ‚Äúser los mejores‚Äù)

* **Normalizaci√≥n de nombres** (lowercase, tildes, guiones, formas salinas versus base) y **sin√≥nimos** (p. ej., ‚Äúibuprofeno lisina‚Äù vs ‚Äúibuprofen lysine‚Äù).
* **IDs estables**: usa los IDs que ya trae CIMA (cuando existan) para sustancias/excipientes/ATC; si no, genera internos pero mapea.
* **Desambiguaci√≥n de fuerzas**: guarda **cantidad** + **unidad** por sustancia (no solo cadena ‚Äú200 mg‚Äù).
* **ATC jer√°rquico**: aseg√∫rate de cargar **toda la cadena** (A ‚Üí A01 ‚Üí A01A ‚Üí A01AA ‚Üí A01AA01‚Ä¶). Puedes hacerlo con un campo `parent\\\_code` o √°rbol.

---

## 5) Rendimiento / UX

* Postgres: ya tienes trgm + tsvector; a√±ade **materialized views** para facetas (por ATC, por sustancia, por excipiente) si hace falta.
* Para grafo: si sigues en Postgres, podr√≠as tirar con tablas N\:M; si quieres explotar queries de caminos, **Neo4j** te dar√° mucha agilidad.
* Mant√©n `RawJson` √≠ntegro para auditor√≠a y **ETL incremental** desde `/registroCambios` refrescando las tablas normalizadas, relaciones y el √≠ndice vectorial.

---

## 6) Qu√© har√≠a **inmediatamente** (pr√≥ximos mini-pasos)

1. **Principios activos** (esqueleto relacional + volcado desde RawJson) ‚Äî *habilita AND/OR por sustancias*.
2. **Excipientes** (con flag ‚Äúdeclaraci√≥n obligatoria‚Äù).
3. **ATC** (con jerarqu√≠a).
4. **Booleans y fechas** (comerc, aut, rev, conduc, triangulo) en Medicamentos.
5. **Documentos** (metadatos) para provenance del chatbot.
6. **Luego**: √≠ndice vectorial con los FT/P/IPE ya linkados.

> Cuando me digas ‚ÄúOK, vamos con 1) Principios activos‚Äù, te paso \\\*\\\*solo el punto 1\\\*\\\*, lo ejecutas, me devuelves resultado, y seguimos con el 2. Cero prisas, cero volcado de info de golpe.

---

## 7) ¬øCu√°ndo creamos los vectores?

Despu√©s de 1‚Äì5 (sobre todo **Documentos**), porque el vector store debe guardar **metadatos** limpios (nregistro, tipo doc, secci√≥n, fecha). As√≠ el agente puede:

* filtrar por estructura ‚Üí **RAG** sobre esos candidatos ‚Üí citar secci√≥n exacta.
* Y el √≠ndice vectorial se re-construye **incrementalmente** cuando cambien los docs (hash/fecha).

---

Si te parece bien esta ruta, dime: **‚Äúvamos con 1) Principios activos‚Äù** y te doy **√∫nicamente** ese paso (sin nada m√°s) para psql.






El Plano Maestro Definitivo y Corregido (Versi√≥n Final)
Revisada toda la conversaci√≥n, el plan de juego que aprobamos y tu briefing, esta es la lista exhaustiva y COMPLETA de todo lo que necesitamos en nuestra base de datos.
1. Tablas Maestras (Cat√°logos)
‚úÖ SustanciaActiva (Hecho)
‚úÖ FormaFarmaceutica (Hecho)
‚úÖ FormaFarmaceuticaSimplificada (Hecho)
‚úÖ Vtm (Hecho)
‚úÖ ViaAdministracion (Hecho)
üìã Excipiente (Por hacer)
üìã AliasExcipiente (Por hacer) - Tu idea, la mantenemos.
üìã Atc (Por hacer) - Con CodigoPadre para la jerarqu√≠a.
üìã Laboratorio (Por hacer)
üìã Documento (Por hacer) - Para los metadatos de FT/Prospecto.
2. Tablas de Relaci√≥n (Conectores N:M)
‚úÖ MedicamentoSustancia (Hecho y enriquecido)
‚úÖ MedicamentoVia (Hecho)
üìã MedicamentoExcipiente (Por hacer) - Con el important√≠simo flag Obligatorio.
üìã MedicamentoAtc (Por hacer)
3. La Tabla Central: Medicamentos
Aqu√≠ es donde se me han quedado cosas. Esta es la lista completa de columnas que debe tener la tabla Medicamentos al final del proceso.
Columnas existentes (validadas):
‚úÖ Id (uuid)
‚úÖ NRegistro (varchar, UNIQUE)
‚úÖ Nombre (varchar)
‚úÖ Dosis (varchar)
‚úÖ Generico (boolean)
‚úÖ Receta (boolean)
‚úÖ RawJson (jsonb - para el resumen de lista)
‚úÖ CreatedAt (timestamptz)
‚úÖ UpdatedAt (timestamptz)
Columnas de relaci√≥n (FKs) y "Banderas de Alerta R√°pida" (POR A√ëADIR/COMPLETAR):
Relaciones 1:N
‚ûï LaboratorioTitularId (INT, FK a Laboratorio)
‚ûï LaboratorioComercializadorId (INT, FK a Laboratorio)
Estado / Comercializaci√≥n / Fechas (Punto d del plan)
‚ûï Comercializado (BOOLEAN) - para el flag comerc
‚ûï FechaAutorizacion (TIMESTAMPTZ) - para estado.aut
‚ûï FechaSuspension (TIMESTAMPTZ, nullable) - para estado.susp
‚ûï FechaRevocacion (TIMESTAMPTZ, nullable) - para estado.rev
¬°¬°Alertas R√°pidas!! (Punto e del plan - el que me he dejado antes)
‚ûï AfectaConduccion (BOOLEAN) - para el flag conduc
‚ûï TrianguloNegro (BOOLEAN) - para el flag triangulo
‚ûï Fotos (BOOLEAN) - para saber si tiene fotos disponibles
‚ûï MaterialesInformativos (BOOLEAN) - para el flag materialesInf
‚ûï Huerfano (BOOLEAN) - para el flag huerfano
‚ûï Biosimilar (BOOLEAN) - para el flag biosimilar
‚ûï Psum (BOOLEAN) - para el flag psum (Problema de Suministro)
Enriquecimiento y Trazabilidad (como definimos)
‚ûï RawJsonDetalle (JSONB)
‚ûï EnrichedAt (TIMESTAMPTZ)



Vale, ahora s√≠, pongamos la **visi√≥n SOTA**.
T√∫ ya tienes la base s√≥lida (medicamentos, diccionarios, relaciones cl√°sicas). Lo siguiente es **levantar capas sem√°nticas y cl√≠nicas** que hagan que tu grafo no sea solo una base de medicamentos, sino un **mapa farmacol√≥gico cognitivo** comparable a lo que usan hospitales de √©lite.

Aqu√≠ te dejo las **tablas relacionales nuevas** que dar√°n un salto diferencial:

---

### 1. **Indicaciones Terap√©uticas**

* **MedicamentoIndicacion** (NRegistro ‚Üî Indicaci√≥nId, + tipo: principal/secundaria, aprobado/off-label, nivel de evidencia).
* **Indicacion** (Id, Nombre, CIE-10/11, SNOMED-CT, Ontolog√≠a propia).
  üëâ Valor: mapa claro de *para qu√© sirve* cada f√°rmaco, alineado con est√°ndares m√©dicos.

---

### 2. **Efectos Adversos**

* **MedicamentoEfectoAdverso** (NRegistro ‚Üî EfectoAdversoId, + severidad, frecuencia, secciones de origen).
* **EfectoAdverso** (Id, Nombre normalizado, C√≥digos MedDRA/CTCAE).
  üëâ Valor: trazabilidad riesgo ‚Üí f√°rmaco; detectar patrones poblacionales o multi-f√°rmaco.

---

### 3. **Interacciones Medicamentosas**

* **InteraccionFarmacoFarmaco** (NRegistro1, NRegistro2, tipo: potenciaci√≥n, antagonismo, toxicidad; nivel evidencia).
* **InteraccionFarmacoAlimento** (NRegistro ‚Üî AlimentoId, + efecto: inhibici√≥n, potenciaci√≥n, absorci√≥n reducida).
* **Alimento/Nutriente** (Id, Nombre, categor√≠a).
  üëâ Valor: grafo cl√≠nico avanzado (lo que usan los sistemas CDSS para alertar en hospitales).

---

### 4. **Poblaciones Especiales**

* **MedicamentoPoblacion** (NRegistro ‚Üî PoblacionId, + notas de ajuste, riesgo, contraindicaci√≥n).
* **Poblacion** (Id, Nombre: embarazo, lactancia, pediatr√≠a, geriatr√≠a, insuficiencia renal/hep√°tica).
  üëâ Valor: personalizaci√≥n cl√≠nica (lo que se acerca a la medicina de precisi√≥n).

---

### 5. **Posolog√≠a y Ajustes**

* **MedicamentoPosologia** (NRegistro, dosis m√≠nima/m√°xima, frecuencia, v√≠a, notas).
* **MedicamentoAjuste** (NRegistro ‚Üî FactorAjusteId, + regla: ajuste por creatinina, genotipo, peso, etc.).
* **FactorAjuste** (Id, Nombre, tipo: fisiol√≥gico/gen√©tico/farmacocin√©tico).
  üëâ Valor: conecta farmacolog√≠a con biomarcadores y condiciones individuales.

---

### 6. **Farmacogen√≥mica / Biomarcadores**

(ya tienes base con *MedicamentoBiomarcador*):

* Expandir con **Relaciones indirectas**: biomarcador ‚Üî enfermedad ‚Üî respuesta.
* A√±adir **NivelEvidencia** y **Recomendaci√≥n Cl√≠nica** (p. ej. CPIC guidelines).
  üëâ Valor: medicina de precisi√≥n real, diferencial frente a cualquier base est√°ndar.

---

### 7. **Alertas de Seguridad**

* **MedicamentoAlerta** (NRegistro ‚Üî AlertaId, + fuente: EMA, FDA, AEMPS; fecha inicio/fin).
* **AlertaFarmacologica** (Id, tipo: retirada, black-box warning, lote afectado).
  üëâ Valor: capa din√°mica de farmacovigilancia; s√∫per valiosa para m√©dicos/farmac√©uticos.

---

### 8. **Combinaciones y Protocolos**

* **MedicamentoProtocolo** (ProtocoloId ‚Üî Medicamento, rol: f√°rmaco base / coadyuvante).
* **Protocolo** (Id, Nombre: quimioterapia X, profilaxis Y).
  üëâ Valor: permite razonar a nivel de tratamientos completos, no solo f√°rmacos aislados.

---

### 9. **Farmacoeconom√≠a y Disponibilidad**

* **MedicamentoPrecio** (NRegistro, fecha, presentaci√≥n, precio, reembolso, gen√©rico/referencia).
* **MedicamentoDisponibilidad** (NRegistro, estado: comercializado/no disponible).
  üëâ Valor: capa estrat√©gica para hospitales y gestores sanitarios.

---

üîë **Resumen**:
Con todo esto tendr√°s un **grafo vivo** con relaciones de:

* **Qu√© trata** (indicaciones),
* **Qu√© provoca** (efectos adversos, interacciones),
* **En qui√©n y c√≥mo** (poblaciones, ajustes, posolog√≠a, biomarcadores),
* **Con qu√© contexto** (protocolos, seguridad, econom√≠a).

üëâ Esto ya es **nivel CDSS hospitalario premium**, y si lo unes a tu pipeline de prospectos + fichas t√©cnicas, estar√°s adelantando al 95% de las soluciones comerciales globales.

---

¬øQuieres que te arme un **diagrama conceptual del grafo final** con estas tablas a√±adidas para que veas la red completa?
